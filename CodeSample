try (ByteArrayOutputStream os = new ByteArrayOutputStream()){
    PDDocument doc = PDDocument.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(path));

    PDAcroForm form = doc.getDocumentCatalog().getAcroForm();
    doc.getDocumentCatalog().setAcroForm(form);

    PDTextField textField = (PDTextField) form.getField("Account Number 1");
    textField.setDefaultValue("Enter account number");

    // Update default appearance to set the placeholder text
    textField.setDefaultAppearance("/Helv 12 Tf 0.7 g");
    // Adjust the color and font size as needed

    PDAnnotationWidget widget = textField.getWidgets().get(0);

    // Create an appearance dictionary and set the default appearance entry
    PDAppearanceDictionary appearanceDictionary = new PDAppearanceDictionary();
    PDAppearanceEntry appearanceEntry = new PDAppearanceEntry();

    // Set the appearance stream using a content stream
    try (PDAppearanceContentStream cs = new PDAppearanceContentStream(doc, widget)) {
        cs.setFont(PDType1Font.HELVETICA, 12);
        cs.setNonStrokingColor(0); // Set the color
        cs.beginText();
        cs.newLineAtOffset(2, 2); // Adjust position as needed
        cs.showText(textField.getDefaultValue()); // Show the default value as the placeholder
        cs.endText();
    }

    appearanceDictionary.setNormalAppearance(appearanceEntry);
    widget.setAppearance(appearanceDictionary);

    PDAppearanceCharacteristicsDictionary fieldAppearance = widget.getAppearanceCharacteristics();
    fieldAppearance.setBorderColour(new PDColor(new float[]{0,1,0}, PDDeviceRGB.INSTANCE));
    widget.setPrinted(true);

    doc.save(os);
    doc.close();

    FileUtils.writeByteArrayToFile(new File("test_" + path), os.toByteArray());
} catch (IOException e) {
    e.printStackTrace();
}
