try (PDDocument doc = PDDocument.load(new File("input.pdf"))) {

    PDAcroForm form = doc.getDocumentCatalog().getAcroForm();
    PDTextField textField = (PDTextField) form.getField("Account Number 1");
    textField.setDefaultValue("Enter account number");
    textField.setDefaultAppearance("/Helv 12 Tf 0.7 g");

    COSDictionary normalAppearance = new COSDictionary();
    COSArray whiteBorderColor = new COSArray();
    whiteBorderColor.add(COSInteger.ZERO); // R
    whiteBorderColor.add(COSInteger.ZERO); // G
    whiteBorderColor.add(COSInteger.ZERO); // B
    normalAppearance.setItem(COSName.BC, whiteBorderColor);

    COSDictionary redAppearance = new COSDictionary();
    COSArray redBorderColor = new COSArray();
    redBorderColor.add(COSInteger.ONE); // R
    redBorderColor.add(COSInteger.ZERO); // G
    redBorderColor.add(COSInteger.ZERO); // B
    redAppearance.setItem(COSName.BC, redBorderColor);

    // Create a JavaScript action to set the appearance based on field value
    String jsScript = 
        "var fieldValue = this.getField('Account Number 1').value;" +
        "if (fieldValue.length === 0) {" +
        "    this.getField('Account Number 1').setAction('Field', 'BorderColor', [0, 0, 0]);" +
        "} else {" +
        "    this.getField('Account Number 1').setAction('Field', 'BorderColor', [1, 0, 0]);" +
        "}";
    PDActionJavaScript pdActionJS = new PDActionJavaScript(jsScript);

    // Set the JavaScript action to the text field
    textField.getWidgets().get(0).setAction(COSName.K, pdActionJS);

    doc.save(new File("output.pdf"));
} catch (IOException e) {
    e.printStackTrace();
}
