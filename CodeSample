Which of the following is a standard for user authentication using OAuth?
Ans: OpenID Connect
How can a Spring application mitigate online brute force password attacks?
Ans : By rate limiting authentication attempts
You are investigating a data leak in your company's address book Spring application. The controller method below is responsible for returning the list of Contacts that are within a team. However not all users of the application should be able to see all Contacts nor should they be able to see all Teams
Ans : @PreAuthorize("hasRole('ROLE_USER') and hasPermission(#team, 'read')")
@PostFilter("hasPermission(filterObject, 'read')")
 
Which Spring Security annotation is used to configure the login functionality using OAuth?
Ans: @EnableWebSecurity
What do you need to have in the following Spring Security configuration method in order to register a user after a successful login with OAuth?
@Override
protected void configure(HttpSecurity http) throws Exception {} 
Ans: http.oauth2Login().successHandler(...);

You are building an application that holds sensitive data (e.g social security numbers). You aim to avoid threats that occur when clients accept access tokens from sources other than intentional requests to a token endpoint. Which protocol would you chose for authentication?
Ans: OAuth 1.0a
What does your client application (Spring Security + OAuth2) use to obtain an access token from the Authorization Server (e.g GitHub) when you log in?
Ans: Authorization Code Grant
When should you use the Cross Site Request Forgery (CSRF) protection mechanism provided by Spring Security Framework?
Ans: For any request made by normal users that could be processed by a browser.

How does a Cross Site Request Forgery (CSRF) attack work?
Ans : The victim unknowingly submits a malicious web request to a website where the victim has privileged access to.
 
What would you use to prevent a Structured Query Language (SQL) Injection attack by forcing the developer to first define all the SQL code and then passing each parameter to the query? 

Ans: Query parameterization
What class needs to be configured in order to configure authentication in Spring Security?
Ans: AuthenticationManager

What do you need to write in the below Spring Security configuration method in order to only allow admins to save a new User using the Spring Data Rest API endpoint "/users" and everybody else to see the list of User entries using the same endpoint?
@Override
    protected void configure(HttpSecurity http) throws Exception {

} 
Ans : http.authorizeRequests().antMatchers(HttpMethod.POST, "/users").hasRole("ROLE_ADMIN"); 
The following Spring configuration is being used to authenticate requests to a Spring application:
protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
      .antMatchers("/**")
      .hasRole("USER")
      .and()
      .httpBasic();
}
Ans: httpBasic() should be replaced with formLogin()
What is the name of the header that Spring Security Framework will add by default to instruct browsers to automatically use HTTPS for future requests?
Ans: Strict-Transport-Security
A browser detects an XSS attack and attempts to change the content in order to still be able to render everything, however this replacement becomes a XSS vulnerability in itself. How would you implement the following Spring Security configure method to block Cross-site scripting?  
@Override
protected void configure(HttpSecurity http) throws Exception {}
Ans : http.headers().xssProtection();

When using the JDBC based authentication provided by Spring Security, how can you use a custom database schema?
Ans: By configuring the SQL needed to look up users
How does Spring Security help prevent Injection attacks?
Ans :By validating user input and escaping potentially dangerous characters
When using the following Spring Security annotation: @PreAuthorize("hasPermission(#contact, 'admin')") what needs to be configured in the Spring application?
Ans: A PermissionEvaluator should be registered with the DefaultMethodSecurityExpressionHandler.
What kind of attack can be done after a successful SQL Injection that will bypass password checks?
Ans Denial-of-Service (DoS) attack
You are investigating why the following user uid=bill,ou=accounts,dc=springframework,dc=org cannot authenticate with the Spring application your team maintains. The Spring application uses the following configuration to authenticate with Microsoft Active Directory:
public void configure(AuthenticationManagerBuilder auth) throws Exception {
    auth
      .ldapAuthentication()
        .userDnPatterns("uid={0},ou=people")
        .contextSource()
          .url("ldap://localhost:8389/dc=springframework,dc=org");
}
Ans The application should set a userSearchFilter and configure a managerDn and managerPassword to enable searching for the user.
You want to get the authorities of an authenticated user in a Spring controller. The user is passed using the API of the Authentication class. You notice that you are unable to call the getAuthorities() method because the Spring Security principal is retrieved as an Object type. What can you do to get the authorities of this authenticated user?
Ans Cast the principal to a UserDetails instance and call the getAuthorities() method.
