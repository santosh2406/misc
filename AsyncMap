import com.mschematic.rest.RestConnection;

public interface Predicate<T> {
    boolean verify(RestConnection.Protocol protocol);
    String createPostBody(String requestPayload);
}
-------------------------------------------------
package com.mschematic.platform.adapter.token;

import com.mschematic.rest.RestConnection;

public class ContentTypePredicate implements Predicate<String> {
    private final RestConnection.Protocol expectedContentType;
    private final Predicate<String> handler;

    public ContentTypePredicate(RestConnection.Protocol expectedContentType, Predicate<String> handler) {
        this.expectedContentType = expectedContentType;
        this.handler = handler;
    }

    @Override
    public boolean verify(RestConnection.Protocol actualContentType) {
        return actualContentType != null && actualContentType.equals(actualContentType) && handler.verify(actualContentType);
    }

    @Override
    public String createPostBody(String requestBody) {
        return handler.createPostBody(requestBody);
    }
}

package com.mschematic.platform.adapter.token;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mschematic.rest.RestConnection;
import com.mschematic.xml.bind.JAXBContextFactory;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;

public class ContentTypeRequestHandler {

    public Predicate<String> createHandler(RestConnection.Protocol contentType, Predicate<String> handler) {
        return new ContentTypePredicate(contentType, handler);
    }

    public String handleJson(Object requestPayload) throws JsonProcessingException {
        ObjectMapper jsonBody = new ObjectMapper();
        jsonBody.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        return jsonBody.writeValueAsString(requestPayload);
    }

    public String handleXml(Class classz,Object requestPayload ) throws JAXBException {
        String xmlBody = null;
        JAXBContext context = JAXBContextFactory.getInstance().getContext(classz);
        Marshaller marshaller = context.createMarshaller();
        StringWriter writer = new StringWriter();
        marshaller.marshal(requestPayload,writer);
        xmlBody = writer.toString();
        return xmlBody;
    }

    public String handleFormUrlEncoded(HashMap<String,String> requestPayload)throws UnsupportedEncodingException{
        StringBuilder result = new StringBuilder();
        boolean first = true;
        for(Map.Entry<String, String> entry : requestPayload.entrySet()){
            if (first)
                first = false;
            else
                result.append("&");
            result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));
            result.append("=");
            result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));
        }
        return result.toString();
    }
}

        Map<String,String> tokenPayload = new HashMap<>();
        tokenPayload.put("grant_type",grantType);
        tokenPayload.put("scope",apiScope);
        contentTypeRequestHandler.createHandler(RestConnection.Protocol.FORM_URLENCODED, contentTypeRequestHandler.handleFormUrlEncoded(tokenPayload));

remove Predicate<T> interface and rewrite same code without constructor
