public class Token {
    private String value;
    private long expirationTimeMillis;

    public Token(String value, long expirationTimeMillis) {
        this.value = value;
        this.expirationTimeMillis = expirationTimeMillis;
    }

    public String getValue() {
        return value;
    }

    public boolean isExpired() {
        return System.currentTimeMillis() > expirationTimeMillis;
    }
}
Create a TokenManager class responsible for fetching, refreshing, and managing tokens for multiple hosts:
java
Copy code
import org.ehcache.Cache;
import org.ehcache.CacheManager;
import org.ehcache.CacheManagerBuilder;
import org.ehcache.config.CacheConfigurationBuilder;
import org.ehcache.config.Configuration;
import org.ehcache.config.builders.CacheConfigurationBuilder.NewCacheConfigurationBuilder;
import org.ehcache.config.builders.CacheManagerBuilder;
import org.ehcache.config.builders.ConfigurationBuilder;

public class TokenManager {
    private static final long THRESHOLD_MILLIS = 60000; // One minute threshold

    private Cache<String, Token> tokenCache;

    public TokenManager() {
        Configuration configuration = ConfigurationBuilder.newConfigurationBuilder().build();
        CacheManager cacheManager = CacheManagerBuilder.newCacheManager(configuration);
        cacheManager.init();

        NewCacheConfigurationBuilder<String, Token> cacheConfiguration = CacheConfigurationBuilder
                .newCacheConfigurationBuilder(String.class, Token.class, null)
                .withExpiry(new CustomExpiry());

        tokenCache = cacheManager.createCache("tokenCache", cacheConfiguration);
    }

    public Token getToken(String host) {
        Token token = tokenCache.get(host);
        if (token == null || token.isExpired()) {
            token = fetchTokenFromServer(host); // Implement this method to fetch token from the server
            tokenCache.put(host, token);
        }
        return token;
    }

    private class CustomExpiry implements Expiry<String, Token> {
        @Override
        public Duration getExpiryForCreation(String key, Token value) {
            return Duration.ofMillis(value.getExpirationTimeMillis() - System.currentTimeMillis());
        }

        @Override
        public Duration getExpiryForAccess(String key, Supplier<? extends Token> value) {
            return null;
        }

        @Override
        public Duration getExpiryForUpdate(String key, Supplier<? extends Token> oldValue, Token newValue) {
            return null;
        }
    }
}
In your application, you can use the TokenManager to get the token for a specific host:
java
Copy code
public class Main {
    public static void main(String[] args) {
        TokenManager tokenManager = new TokenManager();

        String host1 = "https://example-host1.com";
        String host2 = "https://example-host2.com";

        Token token1 = tokenManager.getToken(host1);
        Token token2 = tokenManager.getToken(host2);

        System.out.println("Token for host1: " + token1.getValue());
        System.out.println("Token for host2: " + token2.getValue());
    }
}
Remember that in this example, I've used a simple threshold of one minute (60000 milliseconds) to check if the token is close to expiration. You can adjust the threshold according to your specific requirements. Additionally, the fetchTokenFromServer method needs to be implemented to fetch the token from the authentication server for a given host.





