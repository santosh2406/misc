import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mschematic.rest.RestConnection;
import com.mschematic.xml.bind.JAXBContextFactory;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Predicate;

public class ContentTypeRequestHandler {

    public Predicate<RestConnection.Protocol> createHandler(RestConnection.Protocol contentType) {
        return actualContentType -> actualContentType != null &&
                actualContentType.equals(contentType) &&
                verifyContentType(actualContentType);
    }

    public String handleJson(Object requestPayload) throws JsonProcessingException {
        ObjectMapper jsonMapper = new ObjectMapper();
        jsonMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        return jsonMapper.writeValueAsString(requestPayload);
    }

    public String handleXml(Class<?> clazz, Object requestPayload) throws JAXBException {
        JAXBContext context = JAXBContextFactory.getInstance().getContext(clazz);
        Marshaller marshaller = context.createMarshaller();
        StringWriter writer = new StringWriter();
        marshaller.marshal(requestPayload, writer);
        return writer.toString();
    }

    public String handleFormUrlEncoded(HashMap<String, String> requestPayload) throws UnsupportedEncodingException {
        StringBuilder result = new StringBuilder();
        boolean first = true;
        for (Map.Entry<String, String> entry : requestPayload.entrySet()) {
            if (first) {
                first = false;
            } else {
                result.append("&");
            }
            result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));
            result.append("=");
            result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));
        }
        return result.toString();
    }

    private boolean verifyContentType(RestConnection.Protocol actualContentType) {
        return actualContentType != null;
    }
}
