// Define a thread-safe cache instance as a member variable
private CacheService cacheSvc = factory.getService(CacheService.class);
private final Object lock = new Object();

public Token getToken(Boolean reloadToken) throws ServiceException, IOException, JAXBException, GeneralSecurityException {
    Token token = null;
    String cacheKey = "ehcache:" + TOKEN_OBJECT;

    if (reloadToken || cacheSvc == null) {
        // Generate a fresh token and update the cache
        token = generateToken();
        cacheToken(cacheKey, token);
    } else {
        synchronized (lock) {
            // Try to retrieve the token from the cache
            token = (Token) cacheSvc.get(cacheKey, TOKEN_OBJECT);

            if (token == null) {
                // Generate a fresh token and update the cache
                token = generateToken();
                cacheToken(cacheKey, token);
            }
        }
    }

    return token;
}

private Token generateToken() throws ServiceException, IOException, JAXBException, GeneralSecurityException {
    // Logic to generate a new token
}

private void cacheToken(String cacheKey, Token token) {
    if (cacheSvc != null && token != null) {
        cacheSvc.put(cacheKey, TOKEN_OBJECT, token);
    }
}
